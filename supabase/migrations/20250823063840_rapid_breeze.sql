\n\n-- Extension pour les UUID\nCREATE EXTENSION IF NOT EXISTS "uuid-ossp";
\n\n-- Table des événements\nCREATE TABLE IF NOT EXISTS events (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name text NOT NULL,\n  event_date date NOT NULL,\n  sales_opening_date timestamptz NOT NULL,\n  sales_closing_date timestamptz NOT NULL,\n  status text NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'finished', 'cancelled')),\n  cgv_content text DEFAULT '',\n  faq_content text DEFAULT '',\n  key_info_content text DEFAULT '',\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);
\n\n-- Table des pass/billets\nCREATE TABLE IF NOT EXISTS passes (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  name text NOT NULL,\n  price decimal(10,2) NOT NULL,\n  description text DEFAULT '',\n  initial_stock integer,\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Table des créneaux horaires\nCREATE TABLE IF NOT EXISTS time_slots (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  activity text NOT NULL CHECK (activity IN ('poney', 'tir_arc')),\n  slot_time timestamptz NOT NULL,\n  capacity integer NOT NULL DEFAULT 15,\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Table des ressources poney\nCREATE TABLE IF NOT EXISTS pony_resources (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  initial_stock integer NOT NULL,\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Table des utilisateurs avec rôles\nCREATE TABLE IF NOT EXISTS users (\n  id uuid PRIMARY KEY DEFAULT auth.uid(),\n  email text UNIQUE NOT NULL,\n  role text NOT NULL DEFAULT 'client' CHECK (role IN ('admin', 'pony_provider', 'archery_provider', 'client')),\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Table des réservations\nCREATE TABLE IF NOT EXISTS reservations (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  reservation_number text UNIQUE NOT NULL,\n  client_email text NOT NULL,\n  pass_id uuid REFERENCES passes(id),\n  time_slot_id uuid REFERENCES time_slots(id),\n  payment_status text NOT NULL DEFAULT 'pending' CHECK (payment_status IN ('paid', 'pending', 'refunded')),\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Table des articles du panier (réservation temporaire)\nCREATE TABLE IF NOT EXISTS cart_items (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  session_id text NOT NULL,\n  pass_id uuid REFERENCES passes(id),\n  time_slot_id uuid REFERENCES time_slots(id),\n  quantity integer NOT NULL DEFAULT 1,\n  reserved_until timestamptz NOT NULL DEFAULT (now() + interval '10 minutes'),\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Index pour améliorer les performances\nCREATE INDEX IF NOT EXISTS idx_events_status ON events(status);
\nCREATE INDEX IF NOT EXISTS idx_events_dates ON events(event_date, sales_opening_date, sales_closing_date);
\nCREATE INDEX IF NOT EXISTS idx_passes_event ON passes(event_id);
\nCREATE INDEX IF NOT EXISTS idx_time_slots_event ON time_slots(event_id, activity);
\nCREATE INDEX IF NOT EXISTS idx_reservations_email ON reservations(client_email);
\nCREATE INDEX IF NOT EXISTS idx_cart_items_session ON cart_items(session_id);
\nCREATE INDEX IF NOT EXISTS idx_cart_items_reserved_until ON cart_items(reserved_until);
\n\n-- Fonction pour générer un numéro de réservation\nCREATE OR REPLACE FUNCTION generate_reservation_number()\nRETURNS text AS $$\nBEGIN\n  RETURN 'RES' || TO_CHAR(now(), 'YYYYMMDD') || '-' || LPAD(floor(random() * 10000)::text, 4, '0');
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Trigger pour auto-générer le numéro de réservation\nCREATE OR REPLACE FUNCTION set_reservation_number()\nRETURNS trigger AS $$\nBEGIN\n  IF NEW.reservation_number IS NULL OR NEW.reservation_number = '' THEN\n    NEW.reservation_number := generate_reservation_number();
\n  END IF;
\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql;
\n\nCREATE TRIGGER trigger_set_reservation_number\n  BEFORE INSERT ON reservations\n  FOR EACH ROW\n  EXECUTE FUNCTION set_reservation_number();
\n\n-- Fonction pour nettoyer les articles expirés du panier\nCREATE OR REPLACE FUNCTION cleanup_expired_cart_items()\nRETURNS void AS $$\nBEGIN\n  DELETE FROM cart_items WHERE reserved_until < now();
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Fonction pour calculer le stock restant d'un pass\nCREATE OR REPLACE FUNCTION get_pass_remaining_stock(pass_uuid uuid)\nRETURNS integer AS $$\nDECLARE\n  initial_stock integer;
\n  reserved_count integer;
\n  sold_count integer;
\nBEGIN\n  -- Récupérer le stock initial\n  SELECT p.initial_stock INTO initial_stock\n  FROM passes p WHERE p.id = pass_uuid;
\n  \n  -- Si stock illimité (NULL), retourner un grand nombre\n  IF initial_stock IS NULL THEN\n    RETURN 999999;
\n  END IF;
\n  \n  -- Compter les réservations vendues\n  SELECT COUNT(*) INTO sold_count\n  FROM reservations r \n  WHERE r.pass_id = pass_uuid AND r.payment_status = 'paid';
\n  \n  -- Compter les articles dans le panier (non expirés)\n  SELECT COUNT(*) INTO reserved_count\n  FROM cart_items c \n  WHERE c.pass_id = pass_uuid AND c.reserved_until > now();
\n  \n  RETURN initial_stock - COALESCE(sold_count, 0) - COALESCE(reserved_count, 0);
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Fonction pour calculer les places restantes d'un créneau\nCREATE OR REPLACE FUNCTION get_slot_remaining_capacity(slot_uuid uuid)\nRETURNS integer AS $$\nDECLARE\n  total_capacity integer;
\n  reserved_count integer;
\n  sold_count integer;
\nBEGIN\n  -- Récupérer la capacité totale\n  SELECT ts.capacity INTO total_capacity\n  FROM time_slots ts WHERE ts.id = slot_uuid;
\n  \n  -- Compter les réservations vendues\n  SELECT COUNT(*) INTO sold_count\n  FROM reservations r \n  WHERE r.time_slot_id = slot_uuid AND r.payment_status = 'paid';
\n  \n  -- Compter les articles dans le panier (non expirés)\n  SELECT COUNT(*) INTO reserved_count\n  FROM cart_items c \n  WHERE c.time_slot_id = slot_uuid AND c.reserved_until > now();
\n  \n  RETURN total_capacity - COALESCE(sold_count, 0) - COALESCE(reserved_count, 0);
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Enable RLS sur toutes les tables\nALTER TABLE events ENABLE ROW LEVEL SECURITY;
\nALTER TABLE passes ENABLE ROW LEVEL SECURITY;
\nALTER TABLE time_slots ENABLE ROW LEVEL SECURITY;
\nALTER TABLE pony_resources ENABLE ROW LEVEL SECURITY;
\nALTER TABLE users ENABLE ROW LEVEL SECURITY;
\nALTER TABLE reservations ENABLE ROW LEVEL SECURITY;
\nALTER TABLE cart_items ENABLE ROW LEVEL SECURITY;
\n\n-- Politiques pour les événements (lecture publique pour événements publiés)\nCREATE POLICY "Anyone can view published events" ON events\n  FOR SELECT USING (status = 'published');
\n\nCREATE POLICY "Admins can manage events" ON events\n  FOR ALL TO authenticated\n  USING (EXISTS (\n    SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin'\n  ));
\n\n-- Politiques pour les pass (lecture publique)\nCREATE POLICY "Anyone can view passes for published events" ON passes\n  FOR SELECT USING (\n    EXISTS (\n      SELECT 1 FROM events e \n      WHERE e.id = passes.event_id AND e.status = 'published'\n    )\n  );
\n\nCREATE POLICY "Admins can manage passes" ON passes\n  FOR ALL TO authenticated\n  USING (EXISTS (\n    SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin'\n  ));
\n\n-- Politiques pour les créneaux (lecture publique)\nCREATE POLICY "Anyone can view time slots for published events" ON time_slots\n  FOR SELECT USING (\n    EXISTS (\n      SELECT 1 FROM events e \n      WHERE e.id = time_slots.event_id AND e.status = 'published'\n    )\n  );
\n\nCREATE POLICY "Admins can manage time slots" ON time_slots\n  FOR ALL TO authenticated\n  USING (EXISTS (\n    SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin'\n  ));
\n\n-- Politiques pour les ressources poney\nCREATE POLICY "Admins can manage pony resources" ON pony_resources\n  FOR ALL TO authenticated\n  USING (EXISTS (\n    SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin'\n  ));
\n\n-- Politiques pour les utilisateurs\nCREATE POLICY "Users can view their own profile" ON users\n  FOR SELECT USING (id = auth.uid());
\n\nCREATE POLICY "Admins can view all users" ON users\n  FOR SELECT TO authenticated\n  USING (EXISTS (\n    SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin'\n  ));
\n\n-- Politiques pour les réservations\nCREATE POLICY "Users can view reservations by email" ON reservations\n  FOR SELECT USING (true);
 -- Contrôlé au niveau application\n\nCREATE POLICY "Admins can manage all reservations" ON reservations\n  FOR ALL TO authenticated\n  USING (EXISTS (\n    SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin'\n  ));
\n\n-- Politiques pour le panier (session-based)\nCREATE POLICY "Anyone can manage their cart items" ON cart_items\n  FOR ALL USING (true);
 -- Contrôlé au niveau application par session_id;
