\n\n-- Extension pour UUID\nCREATE EXTENSION IF NOT EXISTS "uuid-ossp";
\n\n-- 1. Table des utilisateurs (créée en premier)\nCREATE TABLE IF NOT EXISTS users (\n  id uuid PRIMARY KEY DEFAULT auth.uid(),\n  email text UNIQUE NOT NULL,\n  role text DEFAULT 'client' CHECK (role IN ('admin', 'pony_provider', 'archery_provider', 'client')),\n  created_at timestamptz DEFAULT now()\n);
\n\n-- RLS pour users\nALTER TABLE users ENABLE ROW LEVEL SECURITY;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'users' AND policyname = 'Users can view their own profile'\n  ) THEN\n    CREATE POLICY "Users can view their own profile"\n      ON users FOR SELECT\n      USING (id = auth.uid());
\n  END IF;
\nEND $$;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'users' AND policyname = 'Admins can view all users'\n  ) THEN\n    CREATE POLICY "Admins can view all users"\n      ON users FOR SELECT\n      USING (auth.role() = 'admin');
\n  END IF;
\nEND $$;
\n\n-- 2. Table des événements\nCREATE TABLE IF NOT EXISTS events (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name text NOT NULL,\n  event_date date NOT NULL,\n  sales_opening_date timestamptz NOT NULL,\n  sales_closing_date timestamptz NOT NULL,\n  status text DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'finished', 'cancelled')),\n  cgv_content text DEFAULT '',\n  faq_content text DEFAULT '',\n  key_info_content text DEFAULT '',\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);
\n\n-- Index pour les événements\nCREATE INDEX IF NOT EXISTS idx_events_status ON events(status);
\nCREATE INDEX IF NOT EXISTS idx_events_dates ON events(event_date, sales_opening_date, sales_closing_date);
\n\n-- RLS pour events\nALTER TABLE events ENABLE ROW LEVEL SECURITY;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'events' AND policyname = 'Anyone can view published events'\n  ) THEN\n    CREATE POLICY "Anyone can view published events"\n      ON events FOR SELECT\n      USING (status = 'published');
\n  END IF;
\nEND $$;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'events' AND policyname = 'Admins can manage events'\n  ) THEN\n    CREATE POLICY "Admins can manage events"\n      ON events FOR ALL\n      USING (auth.role() = 'admin');
\n  END IF;
\nEND $$;
\n\n-- 3. Table des pass\nCREATE TABLE IF NOT EXISTS passes (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  name text NOT NULL,\n  price numeric(10,2) NOT NULL,\n  description text DEFAULT '',\n  initial_stock integer,\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Index pour les pass\nCREATE INDEX IF NOT EXISTS idx_passes_event ON passes(event_id);
\n\n-- RLS pour passes\nALTER TABLE passes ENABLE ROW LEVEL SECURITY;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'passes' AND policyname = 'Anyone can view passes for published events'\n  ) THEN\n    CREATE POLICY "Anyone can view passes for published events"\n      ON passes FOR SELECT\n      USING (EXISTS (\n        SELECT 1 FROM events e \n        WHERE e.id = passes.event_id AND e.status = 'published'\n      ));
\n  END IF;
\nEND $$;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'passes' AND policyname = 'Admins can manage passes'\n  ) THEN\n    CREATE POLICY "Admins can manage passes"\n      ON passes FOR ALL\n      USING (auth.role() = 'admin');
\n  END IF;
\nEND $$;
\n\n-- 4. Table des créneaux horaires\nCREATE TABLE IF NOT EXISTS time_slots (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  activity text NOT NULL CHECK (activity IN ('poney', 'tir_arc')),\n  slot_time timestamptz NOT NULL,\n  capacity integer DEFAULT 15 NOT NULL,\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Index pour les créneaux\nCREATE INDEX IF NOT EXISTS idx_time_slots_event ON time_slots(event_id, activity);
\n\n-- RLS pour time_slots\nALTER TABLE time_slots ENABLE ROW LEVEL SECURITY;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'time_slots' AND policyname = 'Anyone can view time slots for published events'\n  ) THEN\n    CREATE POLICY "Anyone can view time slots for published events"\n      ON time_slots FOR SELECT\n      USING (EXISTS (\n        SELECT 1 FROM events e \n        WHERE e.id = time_slots.event_id AND e.status = 'published'\n      ));
\n  END IF;
\nEND $$;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'time_slots' AND policyname = 'Admins can manage time slots'\n  ) THEN\n    CREATE POLICY "Admins can manage time slots"\n      ON time_slots FOR ALL\n      USING (auth.role() = 'admin');
\n  END IF;
\nEND $$;
\n\n-- 5. Table des ressources poney\nCREATE TABLE IF NOT EXISTS pony_resources (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  initial_stock integer NOT NULL,\n  created_at timestamptz DEFAULT now()\n);
\n\n-- RLS pour pony_resources\nALTER TABLE pony_resources ENABLE ROW LEVEL SECURITY;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'pony_resources' AND policyname = 'Admins can manage pony resources'\n  ) THEN\n    CREATE POLICY "Admins can manage pony resources"\n      ON pony_resources FOR ALL\n      USING (auth.role() = 'admin');
\n  END IF;
\nEND $$;
\n\n-- 6. Table des réservations\nCREATE TABLE IF NOT EXISTS reservations (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  reservation_number text UNIQUE NOT NULL,\n  client_email text NOT NULL,\n  pass_id uuid REFERENCES passes(id),\n  time_slot_id uuid REFERENCES time_slots(id),\n  payment_status text DEFAULT 'pending' CHECK (payment_status IN ('paid', 'pending', 'refunded')),\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Index pour les réservations (avec IF NOT EXISTS)\nCREATE UNIQUE INDEX IF NOT EXISTS reservations_reservation_number_key ON reservations(reservation_number);
\nCREATE INDEX IF NOT EXISTS idx_reservations_email ON reservations(client_email);
\n\n-- RLS pour reservations\nALTER TABLE reservations ENABLE ROW LEVEL SECURITY;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'reservations' AND policyname = 'Users can view reservations by email'\n  ) THEN\n    CREATE POLICY "Users can view reservations by email"\n      ON reservations FOR SELECT\n      USING (true);
\n  END IF;
\nEND $$;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'reservations' AND policyname = 'Admins can manage all reservations'\n  ) THEN\n    CREATE POLICY "Admins can manage all reservations"\n      ON reservations FOR ALL\n      USING (auth.role() = 'admin');
\n  END IF;
\nEND $$;
\n\n-- 7. Table des articles du panier\nCREATE TABLE IF NOT EXISTS cart_items (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  session_id text NOT NULL,\n  pass_id uuid REFERENCES passes(id),\n  time_slot_id uuid REFERENCES time_slots(id),\n  quantity integer DEFAULT 1 NOT NULL,\n  reserved_until timestamptz DEFAULT (now() + interval '10 minutes') NOT NULL,\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Index pour les articles du panier\nCREATE INDEX IF NOT EXISTS idx_cart_items_session ON cart_items(session_id);
\nCREATE INDEX IF NOT EXISTS idx_cart_items_reserved_until ON cart_items(reserved_until);
\n\n-- RLS pour cart_items\nALTER TABLE cart_items ENABLE ROW LEVEL SECURITY;
\n\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE tablename = 'cart_items' AND policyname = 'Anyone can manage their cart items'\n  ) THEN\n    CREATE POLICY "Anyone can manage their cart items"\n      ON cart_items FOR ALL\n      USING (true);
\n  END IF;
\nEND $$;
\n\n-- FONCTIONS\n\n-- Fonction pour générer un numéro de réservation\nCREATE OR REPLACE FUNCTION set_reservation_number()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.reservation_number := 'RES-' || EXTRACT(YEAR FROM NOW()) || '-' || LPAD(EXTRACT(DOY FROM NOW())::text, 3, '0') || '-' || LPAD((RANDOM() * 9999)::int::text, 4, '0');
\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Trigger pour générer automatiquement le numéro de réservation\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_trigger \n    WHERE tgname = 'trigger_set_reservation_number'\n  ) THEN\n    CREATE TRIGGER trigger_set_reservation_number\n      BEFORE INSERT ON reservations\n      FOR EACH ROW\n      EXECUTE FUNCTION set_reservation_number();
\n  END IF;
\nEND $$;
\n\n-- Fonction pour calculer le stock restant d'un pass\nCREATE OR REPLACE FUNCTION get_pass_remaining_stock(pass_uuid uuid)\nRETURNS integer AS $$\nDECLARE\n  initial_stock_val integer;
\n  reserved_count integer;
\n  sold_count integer;
\nBEGIN\n  -- Récupérer le stock initial\n  SELECT initial_stock INTO initial_stock_val\n  FROM passes\n  WHERE id = pass_uuid;
\n  \n  -- Si stock illimité, retourner une grande valeur\n  IF initial_stock_val IS NULL THEN\n    RETURN 999999;
\n  END IF;
\n  \n  -- Compter les réservations dans le panier (non expirées)\n  SELECT COALESCE(SUM(quantity), 0) INTO reserved_count\n  FROM cart_items\n  WHERE pass_id = pass_uuid\n    AND reserved_until > now();
\n  \n  -- Compter les réservations payées\n  SELECT COUNT(*) INTO sold_count\n  FROM reservations\n  WHERE pass_id = pass_uuid\n    AND payment_status = 'paid';
\n  \n  -- Retourner le stock disponible\n  RETURN GREATEST(0, initial_stock_val - reserved_count - sold_count);
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Fonction pour calculer la capacité restante d'un créneau\nCREATE OR REPLACE FUNCTION get_slot_remaining_capacity(slot_uuid uuid)\nRETURNS integer AS $$\nDECLARE\n  total_capacity integer;
\n  reserved_count integer;
\n  sold_count integer;
\nBEGIN\n  -- Récupérer la capacité totale\n  SELECT capacity INTO total_capacity\n  FROM time_slots\n  WHERE id = slot_uuid;
\n  \n  -- Compter les réservations dans le panier (non expirées)\n  SELECT COALESCE(SUM(quantity), 0) INTO reserved_count\n  FROM cart_items\n  WHERE time_slot_id = slot_uuid\n    AND reserved_until > now();
\n  \n  -- Compter les réservations payées\n  SELECT COUNT(*) INTO sold_count\n  FROM reservations\n  WHERE time_slot_id = slot_uuid\n    AND payment_status = 'paid';
\n  \n  -- Retourner la capacité disponible\n  RETURN GREATEST(0, total_capacity - reserved_count - sold_count);
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Fonction pour nettoyer les articles expirés du panier\nCREATE OR REPLACE FUNCTION cleanup_expired_cart_items()\nRETURNS void AS $$\nBEGIN\n  DELETE FROM cart_items\n  WHERE reserved_until <= now();
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- DONNÉES INITIALES\n\n-- Insérer l'événement "Les Défis Lontan"\nINSERT INTO events (\n  id,\n  name,\n  event_date,\n  sales_opening_date,\n  sales_closing_date,\n  status,\n  cgv_content,\n  faq_content,\n  key_info_content\n) VALUES (\n  '550e8400-e29b-41d4-a716-446655440000',\n  'Les Défis Lontan',\n  '2025-03-15',\n  '2025-01-15 08:00:00+00',\n  '2025-03-14 23:59:59+00',\n  'published',\n  'Conditions Générales de Vente\n\n### Article 1 - Objet\nLes présentes conditions générales de vente régissent la vente de billets pour l''événement "Les Défis Lontan".\n\n### Article 2 - Prix\nLes prix sont indiqués en euros TTC. Le paiement s''effectue en ligne de manière sécurisée.\n\n### Article 3 - Annulation\nAucun remboursement ne sera effectué sauf en cas d''annulation de l''événement par l''organisateur.\n\n### Article 4 - Responsabilité\nL''organisateur décline toute responsabilité en cas d''accident lors de l''événement.',\n  'Questions Fréquemment Posées\n\n### Informations Générales\n\n**Q : "Où se déroule l''événement ?"**\n**R : "L''événement a lieu au Parc des Palmistes à Saint-Benoit, Réunion."**\n\n**Q : "À quelle heure commence l''événement ?"**\n**R : "L''événement débute à 9h00 et se termine à 17h00."**\n\n**Q : "Y a-t-il un parking disponible ?"**\n**R : "Oui, un parking gratuit est disponible sur place."**\n\n### Billets et Réservations\n\n**Q : "Puis-je modifier ma réservation ?"**\n**R : "Les modifications ne sont pas possibles une fois la réservation confirmée."**\n\n**Q : "Comment recevoir mes billets ?"**\n**R : "Vos billets vous seront envoyés par e-mail après confirmation du paiement."**\n\n**Q : "Que faire si je perds mes billets ?"**\n**R : "Utilisez la fonction ''Retrouver mon billet'' sur notre site avec votre adresse e-mail."**\n\n### Activités\n\n**Q : "À partir de quel âge peut-on faire du poney ?"**\n**R : "L''activité poney est accessible dès 3 ans, avec accompagnement obligatoire pour les moins de 8 ans."**\n\n**Q : "Le tir à l''arc est-il sécurisé ?"**\n**R : "Oui, l''activité est encadrée par des moniteurs diplômés avec tout l''équipement de sécurité."**',\n  'Venez vivre une journée exceptionnelle au cœur de la nature réunionnaise ! \n\n🏇 **Activités Poney** : Découverte et balade pour tous les âges\n🏹 **Tir à l''Arc** : Initiation et perfectionnement avec des moniteurs diplômés\n🌿 **Cadre naturel** : Au Parc des Palmistes, un écrin de verdure unique\n\n**Horaires :** 9h00 - 17h00\n**Lieu :** Parc des Palmistes, Saint-Benoit\n**Parking gratuit** sur place\n\nUne expérience familiale inoubliable dans un cadre exceptionnel !'\n) ON CONFLICT (id) DO UPDATE SET\n  name = EXCLUDED.name,\n  event_date = EXCLUDED.event_date,\n  sales_opening_date = EXCLUDED.sales_opening_date,\n  sales_closing_date = EXCLUDED.sales_closing_date,\n  status = EXCLUDED.status,\n  cgv_content = EXCLUDED.cgv_content,\n  faq_content = EXCLUDED.faq_content,\n  key_info_content = EXCLUDED.key_info_content,\n  updated_at = now();
\n\n-- Insérer les pass pour l'événement\nINSERT INTO passes (id, event_id, name, price, description, initial_stock) VALUES\n(\n  '660e8400-e29b-41d4-a716-446655440001',\n  '550e8400-e29b-41d4-a716-446655440000',\n  'Pass Marmaille (3-12 ans)',\n  15.00,\n  'Pass spécialement conçu pour les enfants de 3 à 12 ans. Inclut une activité au choix (poney ou tir à l''arc) avec encadrement adapté à l''âge.',\n  50\n),\n(\n  '660e8400-e29b-41d4-a716-446655440002',\n  '550e8400-e29b-41d4-a716-446655440000',\n  'Pass Tangue (13-17 ans)',\n  20.00,\n  'Pass pour les adolescents de 13 à 17 ans. Activité au choix avec un niveau d''encadrement adapté aux ados.',\n  30\n),\n(\n  '660e8400-e29b-41d4-a716-446655440003',\n  '550e8400-e29b-41d4-a716-446655440000',\n  'Pass Papangue (18+ ans)',\n  25.00,\n  'Pass adulte pour les 18 ans et plus. Activité au choix avec encadrement professionnel.',\n  40\n),\n(\n  '660e8400-e29b-41d4-a716-446655440004',\n  '550e8400-e29b-41d4-a716-446655440000',\n  'Pass Famille (2 adultes + 2 enfants)',\n  65.00,\n  'Pass famille économique pour 2 adultes et 2 enfants. Chaque membre peut choisir son activité selon son âge.',\n  20\n),\n(\n  '660e8400-e29b-41d4-a716-446655440005',\n  '550e8400-e29b-41d4-a716-446655440000',\n  'Pass Découverte (Accès libre)',\n  8.00,\n  'Accès libre au parc sans activité spécifique. Parfait pour profiter du cadre naturel et des espaces de pique-nique.',\n  NULL\n) ON CONFLICT (id) DO UPDATE SET\n  name = EXCLUDED.name,\n  price = EXCLUDED.price,\n  description = EXCLUDED.description,\n  initial_stock = EXCLUDED.initial_stock;
\n\n-- Insérer les créneaux horaires pour les activités\nINSERT INTO time_slots (id, event_id, activity, slot_time, capacity) VALUES\n-- Créneaux Poney (matin)\n('770e8400-e29b-41d4-a716-446655440001', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 09:00:00+00', 8),\n('770e8400-e29b-41d4-a716-446655440002', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 09:30:00+00', 8),\n('770e8400-e29b-41d4-a716-446655440003', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 10:00:00+00', 8),\n('770e8400-e29b-41d4-a716-446655440004', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 10:30:00+00', 8),\n('770e8400-e29b-41d4-a716-446655440005', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 11:00:00+00', 8),\n('770e8400-e29b-41d4-a716-446655440006', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 11:30:00+00', 8),\n\n-- Créneaux Poney (après-midi)\n('770e8400-e29b-41d4-a716-446655440007', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 14:00:00+00', 8),\n('770e8400-e29b-41d4-a716-446655440008', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 14:30:00+00', 8),\n('770e8400-e29b-41d4-a716-446655440009', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 15:00:00+00', 8),\n('770e8400-e29b-41d4-a716-446655440010', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 15:30:00+00', 8),\n('770e8400-e29b-41d4-a716-446655440011', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 16:00:00+00', 8),\n\n-- Créneaux Tir à l'Arc (matin)\n('770e8400-e29b-41d4-a716-446655440012', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 09:00:00+00', 12),\n('770e8400-e29b-41d4-a716-446655440013', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 09:45:00+00', 12),\n('770e8400-e29b-41d4-a716-446655440014', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 10:30:00+00', 12),\n('770e8400-e29b-41d4-a716-446655440015', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 11:15:00+00', 12),\n\n-- Créneaux Tir à l'Arc (après-midi)\n('770e8400-e29b-41d4-a716-446655440016', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 14:00:00+00', 12),\n('770e8400-e29b-41d4-a716-446655440017', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 14:45:00+00', 12),\n('770e8400-e29b-41d4-a716-446655440018', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 15:30:00+00', 12),\n('770e8400-e29b-41d4-a716-446655440019', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 16:15:00+00', 12)\nON CONFLICT (id) DO UPDATE SET\n  activity = EXCLUDED.activity,\n  slot_time = EXCLUDED.slot_time,\n  capacity = EXCLUDED.capacity;
\n\n-- Insérer les ressources poney pour l'événement\nINSERT INTO pony_resources (id, event_id, initial_stock) VALUES\n('880e8400-e29b-41d4-a716-446655440001', '550e8400-e29b-41d4-a716-446655440000', 12)\nON CONFLICT (id) DO UPDATE SET\n  initial_stock = EXCLUDED.initial_stock;
\n\n-- Insérer un utilisateur admin par défaut\nINSERT INTO users (id, email, role) VALUES\n('990e8400-e29b-41d4-a716-446655440001', 'admin@billetevent.com', 'admin')\nON CONFLICT (id) DO UPDATE SET\n  email = EXCLUDED.email,\n  role = EXCLUDED.role;
;
