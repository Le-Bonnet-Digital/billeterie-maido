\n\n-- Drop existing policies for time_slots\nDROP POLICY IF EXISTS "Admins can manage time slots" ON time_slots;
\nDROP POLICY IF EXISTS "Anyone can view time slots for published events" ON time_slots;
\n\n-- Create new policies for time_slots that check the users table\nCREATE POLICY "Admins can manage time slots"\n  ON time_slots\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM users \n      WHERE users.id = auth.uid() \n      AND users.role = 'admin'\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM users \n      WHERE users.id = auth.uid() \n      AND users.role = 'admin'\n    )\n  );
\n\nCREATE POLICY "Anyone can view time slots for published events"\n  ON time_slots\n  FOR SELECT\n  TO public\n  USING (\n    EXISTS (\n      SELECT 1 FROM events e\n      WHERE e.id = time_slots.event_id \n      AND e.status = 'published'\n    )\n  );
\n\n-- Also update reservations policies to ensure admins can delete reservations\nDROP POLICY IF EXISTS "Admins can manage all reservations" ON reservations;
\n\nCREATE POLICY "Admins can manage all reservations"\n  ON reservations\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM users \n      WHERE users.id = auth.uid() \n      AND users.role = 'admin'\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM users \n      WHERE users.id = auth.uid() \n      AND users.role = 'admin'\n    )\n  );
;
