\n\n-- Fonction pour calculer le stock maximum d'un pass basé sur ses activités\nCREATE OR REPLACE FUNCTION get_pass_max_stock_from_activities(pass_uuid uuid)\nRETURNS integer\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nDECLARE\n  min_activity_stock integer := 999999;
\n  activity_stock integer;
\n  activity_record RECORD;
\nBEGIN\n  -- Parcourir toutes les activités liées au pass\n  FOR activity_record IN\n    SELECT ea.id, ea.stock_limit\n    FROM pass_activities pa\n    JOIN event_activities ea ON ea.id = pa.event_activity_id\n    WHERE pa.pass_id = pass_uuid\n  LOOP\n    -- Si l'activité a une limite de stock\n    IF activity_record.stock_limit IS NOT NULL THEN\n      -- Calculer le stock restant pour cette activité\n      SELECT get_event_activity_remaining_stock(activity_record.id) INTO activity_stock;
\n      \n      -- Prendre le minimum\n      IF activity_stock < min_activity_stock THEN\n        min_activity_stock := activity_stock;
\n      END IF;
\n    END IF;
\n  END LOOP;
\n  \n  RETURN min_activity_stock;
\nEND;
\n$$;
\n\n-- Fonction pour calculer le stock effectif restant d'un pass\nCREATE OR REPLACE FUNCTION get_pass_effective_remaining_stock(pass_uuid uuid)\nRETURNS integer\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nDECLARE\n  pass_stock integer;
\n  activity_max_stock integer;
\nBEGIN\n  -- Récupérer le stock du pass lui-même\n  SELECT get_pass_remaining_stock(pass_uuid) INTO pass_stock;
\n  \n  -- Récupérer le stock maximum basé sur les activités\n  SELECT get_pass_max_stock_from_activities(pass_uuid) INTO activity_max_stock;
\n  \n  -- Retourner le minimum des deux\n  RETURN LEAST(COALESCE(pass_stock, 999999), COALESCE(activity_max_stock, 999999));
\nEND;
\n$$;
\n\n-- Fonction pour vérifier si un pass peut être réservé\nCREATE OR REPLACE FUNCTION can_reserve_pass(pass_uuid uuid, quantity integer DEFAULT 1)\nRETURNS boolean\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nDECLARE\n  effective_stock integer;
\nBEGIN\n  SELECT get_pass_effective_remaining_stock(pass_uuid) INTO effective_stock;
\n  \n  RETURN effective_stock >= quantity;
\nEND;
\n$$;
;
