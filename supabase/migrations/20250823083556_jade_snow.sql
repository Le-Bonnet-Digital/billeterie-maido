\n\n-- Supprimer les tables existantes (dans l'ordre inverse des dépendances)\nDROP TABLE IF EXISTS cart_items CASCADE;
\nDROP TABLE IF EXISTS reservations CASCADE;
\nDROP TABLE IF EXISTS pony_resources CASCADE;
\nDROP TABLE IF EXISTS time_slots CASCADE;
\nDROP TABLE IF EXISTS passes CASCADE;
\nDROP TABLE IF EXISTS events CASCADE;
\nDROP TABLE IF EXISTS users CASCADE;
\n\n-- Supprimer les fonctions existantes\nDROP FUNCTION IF EXISTS get_pass_remaining_stock(uuid);
\nDROP FUNCTION IF EXISTS get_slot_remaining_capacity(uuid);
\nDROP FUNCTION IF EXISTS cleanup_expired_cart_items();
\nDROP FUNCTION IF EXISTS set_reservation_number();
\n\n-- Activer l'extension UUID si pas déjà fait\nCREATE EXTENSION IF NOT EXISTS "uuid-ossp";
\n\n-- 1. Table users (créée en premier car référencée par les autres)\nCREATE TABLE users (\n  id uuid PRIMARY KEY DEFAULT auth.uid(),\n  email text UNIQUE NOT NULL,\n  role text NOT NULL DEFAULT 'client' CHECK (role IN ('admin', 'pony_provider', 'archery_provider', 'client')),\n  created_at timestamptz DEFAULT now()\n);
\n\nALTER TABLE users ENABLE ROW LEVEL SECURITY;
\n\nCREATE POLICY "Users can view their own profile"\n  ON users FOR SELECT\n  USING (id = auth.uid());
\n\nCREATE POLICY "Admins can view all users"\n  ON users FOR SELECT\n  USING (auth.role() = 'admin');
\n\n-- 2. Table events\nCREATE TABLE events (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name text NOT NULL,\n  event_date date NOT NULL,\n  sales_opening_date timestamptz NOT NULL,\n  sales_closing_date timestamptz NOT NULL,\n  status text NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'finished', 'cancelled')),\n  cgv_content text DEFAULT '',\n  faq_content text DEFAULT '',\n  key_info_content text DEFAULT '',\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);
\n\nALTER TABLE events ENABLE ROW LEVEL SECURITY;
\n\nCREATE POLICY "Anyone can view published events"\n  ON events FOR SELECT\n  USING (status = 'published');
\n\nCREATE POLICY "Admins can manage events"\n  ON events FOR ALL\n  USING (auth.role() = 'admin');
\n\n-- Index pour optimiser les requêtes\nCREATE INDEX idx_events_status ON events(status);
\nCREATE INDEX idx_events_dates ON events(event_date, sales_opening_date, sales_closing_date);
\n\n-- 3. Table passes\nCREATE TABLE passes (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  name text NOT NULL,\n  price numeric(10,2) NOT NULL,\n  description text DEFAULT '',\n  initial_stock integer,\n  created_at timestamptz DEFAULT now()\n);
\n\nALTER TABLE passes ENABLE ROW LEVEL SECURITY;
\n\nCREATE POLICY "Anyone can view passes for published events"\n  ON passes FOR SELECT\n  USING (EXISTS (\n    SELECT 1 FROM events e \n    WHERE e.id = passes.event_id AND e.status = 'published'\n  ));
\n\nCREATE POLICY "Admins can manage passes"\n  ON passes FOR ALL\n  USING (auth.role() = 'admin');
\n\nCREATE INDEX idx_passes_event ON passes(event_id);
\n\n-- 4. Table time_slots\nCREATE TABLE time_slots (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  activity text NOT NULL CHECK (activity IN ('poney', 'tir_arc')),\n  slot_time timestamptz NOT NULL,\n  capacity integer NOT NULL DEFAULT 15,\n  created_at timestamptz DEFAULT now()\n);
\n\nALTER TABLE time_slots ENABLE ROW LEVEL SECURITY;
\n\nCREATE POLICY "Anyone can view time slots for published events"\n  ON time_slots FOR SELECT\n  USING (EXISTS (\n    SELECT 1 FROM events e \n    WHERE e.id = time_slots.event_id AND e.status = 'published'\n  ));
\n\nCREATE POLICY "Admins can manage time slots"\n  ON time_slots FOR ALL\n  USING (auth.role() = 'admin');
\n\nCREATE INDEX idx_time_slots_event ON time_slots(event_id, activity);
\n\n-- 5. Table pony_resources\nCREATE TABLE pony_resources (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  initial_stock integer NOT NULL,\n  created_at timestamptz DEFAULT now()\n);
\n\nALTER TABLE pony_resources ENABLE ROW LEVEL SECURITY;
\n\nCREATE POLICY "Admins can manage pony resources"\n  ON pony_resources FOR ALL\n  USING (auth.role() = 'admin');
\n\n-- 6. Table reservations\nCREATE TABLE reservations (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  reservation_number text UNIQUE NOT NULL,\n  client_email text NOT NULL,\n  pass_id uuid REFERENCES passes(id),\n  time_slot_id uuid REFERENCES time_slots(id),\n  payment_status text NOT NULL DEFAULT 'pending' CHECK (payment_status IN ('paid', 'pending', 'refunded')),\n  created_at timestamptz DEFAULT now()\n);
\n\nALTER TABLE reservations ENABLE ROW LEVEL SECURITY;
\n\nCREATE POLICY "Users can view reservations by email"\n  ON reservations FOR SELECT\n  USING (true);
\n\nCREATE POLICY "Admins can manage all reservations"\n  ON reservations FOR ALL\n  USING (auth.role() = 'admin');
\n\nCREATE INDEX idx_reservations_email ON reservations(client_email);
\n\n-- 7. Table cart_items\nCREATE TABLE cart_items (\n  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n  session_id text NOT NULL,\n  pass_id uuid REFERENCES passes(id),\n  time_slot_id uuid REFERENCES time_slots(id),\n  quantity integer NOT NULL DEFAULT 1,\n  reserved_until timestamptz NOT NULL DEFAULT (now() + interval '10 minutes'),\n  created_at timestamptz DEFAULT now()\n);
\n\nALTER TABLE cart_items ENABLE ROW LEVEL SECURITY;
\n\nCREATE POLICY "Anyone can manage their cart items"\n  ON cart_items FOR ALL\n  USING (true);
\n\nCREATE INDEX idx_cart_items_session ON cart_items(session_id);
\nCREATE INDEX idx_cart_items_reserved_until ON cart_items(reserved_until);
\n\n-- FONCTIONS UTILITAIRES\n\n-- Fonction pour calculer le stock restant d'un pass\nCREATE OR REPLACE FUNCTION get_pass_remaining_stock(pass_uuid uuid)\nRETURNS integer AS $$\nDECLARE\n  initial_stock_val integer;
\n  reserved_count integer;
\n  sold_count integer;
\n  total_used integer;
\nBEGIN\n  -- Récupérer le stock initial\n  SELECT initial_stock INTO initial_stock_val\n  FROM passes \n  WHERE id = pass_uuid;
\n  \n  -- Si stock illimité, retourner une grande valeur\n  IF initial_stock_val IS NULL THEN\n    RETURN 999999;
\n  END IF;
\n  \n  -- Compter les réservations dans le panier (non expirées)\n  SELECT COALESCE(SUM(quantity), 0) INTO reserved_count\n  FROM cart_items \n  WHERE pass_id = pass_uuid \n    AND reserved_until > now();
\n  \n  -- Compter les réservations payées\n  SELECT COUNT(*) INTO sold_count\n  FROM reservations \n  WHERE pass_id = pass_uuid \n    AND payment_status = 'paid';
\n  \n  total_used := COALESCE(reserved_count, 0) + COALESCE(sold_count, 0);
\n  \n  RETURN GREATEST(0, initial_stock_val - total_used);
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Fonction pour calculer la capacité restante d'un créneau\nCREATE OR REPLACE FUNCTION get_slot_remaining_capacity(slot_uuid uuid)\nRETURNS integer AS $$\nDECLARE\n  slot_capacity integer;
\n  reserved_count integer;
\n  sold_count integer;
\n  total_used integer;
\nBEGIN\n  -- Récupérer la capacité du créneau\n  SELECT capacity INTO slot_capacity\n  FROM time_slots \n  WHERE id = slot_uuid;
\n  \n  -- Compter les réservations dans le panier (non expirées)\n  SELECT COALESCE(SUM(quantity), 0) INTO reserved_count\n  FROM cart_items \n  WHERE time_slot_id = slot_uuid \n    AND reserved_until > now();
\n  \n  -- Compter les réservations payées\n  SELECT COUNT(*) INTO sold_count\n  FROM reservations \n  WHERE time_slot_id = slot_uuid \n    AND payment_status = 'paid';
\n  \n  total_used := COALESCE(reserved_count, 0) + COALESCE(sold_count, 0);
\n  \n  RETURN GREATEST(0, slot_capacity - total_used);
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Fonction pour nettoyer les articles expirés du panier\nCREATE OR REPLACE FUNCTION cleanup_expired_cart_items()\nRETURNS void AS $$\nBEGIN\n  DELETE FROM cart_items \n  WHERE reserved_until <= now();
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Fonction pour générer un numéro de réservation unique\nCREATE OR REPLACE FUNCTION set_reservation_number()\nRETURNS trigger AS $$\nBEGIN\n  IF NEW.reservation_number IS NULL OR NEW.reservation_number = '' THEN\n    NEW.reservation_number := 'RES-' || UPPER(SUBSTRING(gen_random_uuid()::text FROM 1 FOR 8));
\n  END IF;
\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Trigger pour générer automatiquement le numéro de réservation\nCREATE TRIGGER trigger_set_reservation_number\n  BEFORE INSERT ON reservations\n  FOR EACH ROW\n  EXECUTE FUNCTION set_reservation_number();
\n\n-- INSERTION DES DONNÉES INITIALES\n\n-- Insérer l'événement "Les Défis Lontan"\nINSERT INTO events (\n  id,\n  name,\n  event_date,\n  sales_opening_date,\n  sales_closing_date,\n  status,\n  cgv_content,\n  faq_content,\n  key_info_content\n) VALUES (\n  '550e8400-e29b-41d4-a716-446655440000',\n  'Les Défis Lontan',\n  '2025-03-15',\n  '2025-01-15 09:00:00+00',\n  '2025-03-14 23:59:59+00',\n  'published',\n  'Conditions Générales de Vente\n\n### Article 1 - Objet\nLes présentes conditions générales de vente régissent les relations contractuelles entre l''organisateur et les participants à l''événement "Les Défis Lontan".\n\n### Article 2 - Billetterie\n- Les billets sont nominatifs et non remboursables sauf annulation de l''événement\n- En cas d''annulation, le remboursement sera effectué sous 30 jours\n- Les billets ne peuvent être revendus\n\n### Article 3 - Responsabilité\nL''organisateur décline toute responsabilité en cas d''accident lors des activités. Une assurance responsabilité civile est recommandée.\n\n### Article 4 - Droit applicable\nCes conditions sont soumises au droit français.',\n  'Questions Fréquemment Posées\n\n### Informations Générales\n\n**Q : "À quelle heure commence l''événement ?"**\n**R : "L''événement se déroule de 9h00 à 18h00. Les activités commencent dès 9h30."**\n\n**Q : "Où se déroule l''événement ?"**\n**R : "L''événement a lieu au Parc des Loisirs de Saint-Pierre, 123 Route des Aventures, 97410 Saint-Pierre."**\n\n**Q : "Y a-t-il un parking disponible ?"**\n**R : "Oui, un parking gratuit de 200 places est disponible sur site."**\n\n### Billets et Réservations\n\n**Q : "Puis-je annuler ma réservation ?"**\n**R : "Les billets ne sont pas remboursables sauf en cas d''annulation de l''événement par l''organisateur."**\n\n**Q : "Puis-je modifier mon créneau horaire ?"**\n**R : "Les modifications de créneaux sont possibles jusqu''à 48h avant l''événement, sous réserve de disponibilité."**\n\n**Q : "Que faire si je perds mon billet ?"**\n**R : "Utilisez la fonction ''Retrouver mon billet'' sur le site avec votre adresse e-mail de réservation."**\n\n### Activités\n\n**Q : "À partir de quel âge peut-on faire du poney ?"**\n**R : "L''activité poney est accessible dès 3 ans, avec accompagnement obligatoire pour les moins de 8 ans."**\n\n**Q : "Le tir à l''arc est-il sécurisé ?"**\n**R : "Oui, l''activité est encadrée par des moniteurs diplômés avec tout l''équipement de sécurité fourni."**\n\n### Restauration et Services\n\n**Q : "Y a-t-il de la restauration sur place ?"**\n**R : "Oui, plusieurs stands de restauration locale seront présents, ainsi qu''une buvette."**\n\n**Q : "L''événement a-t-il lieu en cas de pluie ?"**\n**R : "L''événement est maintenu par temps de pluie. Des abris sont prévus pour les activités."**',\n  'Venez vivre une journée exceptionnelle au cœur de la tradition réunionnaise ! \n\n🏇 **Activités Poney** : Découverte et initiation pour tous les âges\n🏹 **Tir à l''Arc** : Perfectionnement et compétition amicale\n🎪 **Animations** : Spectacles, musique traditionnelle et danses locales\n🍽️ **Restauration** : Spécialités créoles et produits du terroir\n\n**Lieu :** Parc des Loisirs de Saint-Pierre\n**Horaires :** 9h00 - 18h00\n**Parking gratuit** disponible sur site\n\nUn événement familial dans un cadre naturel exceptionnel, alliant tradition et modernité pour le plaisir de tous !'\n) ON CONFLICT (id) DO UPDATE SET\n  name = EXCLUDED.name,\n  event_date = EXCLUDED.event_date,\n  sales_opening_date = EXCLUDED.sales_opening_date,\n  sales_closing_date = EXCLUDED.sales_closing_date,\n  status = EXCLUDED.status,\n  cgv_content = EXCLUDED.cgv_content,\n  faq_content = EXCLUDED.faq_content,\n  key_info_content = EXCLUDED.key_info_content,\n  updated_at = now();
\n\n-- Insérer les pass pour l'événement\nINSERT INTO passes (id, event_id, name, price, description, initial_stock) VALUES\n  ('650e8400-e29b-41d4-a716-446655440001', '550e8400-e29b-41d4-a716-446655440000', 'Pass Marmaille', 15.00, 'Pass enfant (3-12 ans) avec accès aux activités poney et tir à l''arc. Créneau horaire obligatoire.', 50),\n  ('650e8400-e29b-41d4-a716-446655440002', '550e8400-e29b-41d4-a716-446655440000', 'Pass Tangue', 25.00, 'Pass adulte avec accès aux activités poney et tir à l''arc. Créneau horaire obligatoire.', 100),\n  ('650e8400-e29b-41d4-a716-446655440003', '550e8400-e29b-41d4-a716-446655440000', 'Pass Papangue', 35.00, 'Pass premium avec accès prioritaire et activités supplémentaires. Créneau horaire obligatoire.', 30),\n  ('650e8400-e29b-41d4-a716-446655440004', '550e8400-e29b-41d4-a716-446655440000', 'Pass Spectateur', 8.00, 'Accès aux spectacles et animations, restauration. Pas d''activités sportives.', NULL)\nON CONFLICT (id) DO UPDATE SET\n  name = EXCLUDED.name,\n  price = EXCLUDED.price,\n  description = EXCLUDED.description,\n  initial_stock = EXCLUDED.initial_stock;
\n\n-- Insérer les créneaux horaires pour les activités\nINSERT INTO time_slots (id, event_id, activity, slot_time, capacity) VALUES\n  -- Créneaux Poney (matin)\n  ('750e8400-e29b-41d4-a716-446655440001', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 09:30:00+00', 15),\n  ('750e8400-e29b-41d4-a716-446655440002', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 10:30:00+00', 15),\n  ('750e8400-e29b-41d4-a716-446655440003', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 11:30:00+00', 15),\n  -- Créneaux Poney (après-midi)\n  ('750e8400-e29b-41d4-a716-446655440004', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 14:00:00+00', 15),\n  ('750e8400-e29b-41d4-a716-446655440005', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 15:00:00+00', 15),\n  ('750e8400-e29b-41d4-a716-446655440006', '550e8400-e29b-41d4-a716-446655440000', 'poney', '2025-03-15 16:00:00+00', 15),\n  -- Créneaux Tir à l'Arc (matin)\n  ('750e8400-e29b-41d4-a716-446655440007', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 09:30:00+00', 12),\n  ('750e8400-e29b-41d4-a716-446655440008', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 10:30:00+00', 12),\n  ('750e8400-e29b-41d4-a716-446655440009', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 11:30:00+00', 12),\n  -- Créneaux Tir à l'Arc (après-midi)\n  ('750e8400-e29b-41d4-a716-446655440010', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 14:00:00+00', 12),\n  ('750e8400-e29b-41d4-a716-446655440011', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 15:00:00+00', 12),\n  ('750e8400-e29b-41d4-a716-446655440012', '550e8400-e29b-41d4-a716-446655440000', 'tir_arc', '2025-03-15 16:00:00+00', 12)\nON CONFLICT (id) DO UPDATE SET\n  activity = EXCLUDED.activity,\n  slot_time = EXCLUDED.slot_time,\n  capacity = EXCLUDED.capacity;
\n\n-- Insérer les ressources poney pour l'événement\nINSERT INTO pony_resources (id, event_id, initial_stock) VALUES\n  ('850e8400-e29b-41d4-a716-446655440001', '550e8400-e29b-41d4-a716-446655440000', 20)\nON CONFLICT (id) DO UPDATE SET\n  initial_stock = EXCLUDED.initial_stock;
\n\n-- Fonction de nettoyage automatique des articles expirés du panier\nCREATE OR REPLACE FUNCTION cleanup_expired_cart_items()\nRETURNS void AS $$\nBEGIN\n  DELETE FROM cart_items \n  WHERE reserved_until <= now();
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Fonction pour générer un numéro de réservation unique\nCREATE OR REPLACE FUNCTION set_reservation_number()\nRETURNS trigger AS $$\nBEGIN\n  IF NEW.reservation_number IS NULL OR NEW.reservation_number = '' THEN\n    NEW.reservation_number := 'RES-' || UPPER(SUBSTRING(gen_random_uuid()::text FROM 1 FOR 8));
\n  END IF;
\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Message de confirmation\nDO $$\nBEGIN\n  RAISE NOTICE 'Base de données configurée avec succès !';
\n  RAISE NOTICE 'Événement "Les Défis Lontan" créé avec % pass et % créneaux horaires.', \n    (SELECT COUNT(*) FROM passes WHERE event_id = '550e8400-e29b-41d4-a716-446655440000'),\n    (SELECT COUNT(*) FROM time_slots WHERE event_id = '550e8400-e29b-41d4-a716-446655440000');
\nEND $$;
;
