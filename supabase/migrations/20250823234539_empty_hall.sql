\n\n-- Create activities master table\nCREATE TABLE IF NOT EXISTS activities (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  name text NOT NULL UNIQUE,\n  description text DEFAULT '',\n  icon text DEFAULT '',\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Create event_activities junction table\nCREATE TABLE IF NOT EXISTS event_activities (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  activity_id uuid REFERENCES activities(id) ON DELETE CASCADE,\n  stock_limit integer DEFAULT NULL, -- NULL = unlimited\n  requires_time_slot boolean DEFAULT false,\n  created_at timestamptz DEFAULT now(),\n  UNIQUE(event_id, activity_id)\n);
\n\n-- Insert default activities\nINSERT INTO activities (name, description, icon) VALUES\n  ('poney', 'Balade à poney pour petits et grands', '🐴'),\n  ('tir_arc', 'Initiation au tir à l''arc', '🏹')\nON CONFLICT (name) DO NOTHING;
\n\n-- Update activity_resources to reference event_activities\nDO $$\nBEGIN\n  -- Add event_activity_id column if it doesn't exist\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'activity_resources' AND column_name = 'event_activity_id'\n  ) THEN\n    ALTER TABLE activity_resources ADD COLUMN event_activity_id uuid REFERENCES event_activities(id) ON DELETE CASCADE;
\n  END IF;
\nEND $$;
\n\n-- Drop the old activity column and total_capacity (will be managed by event_activities)\nDO $$\nBEGIN\n  IF EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'activity_resources' AND column_name = 'activity'\n  ) THEN\n    ALTER TABLE activity_resources DROP COLUMN activity;
\n  END IF;
\n  \n  IF EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'activity_resources' AND column_name = 'total_capacity'\n  ) THEN\n    ALTER TABLE activity_resources DROP COLUMN total_capacity;
\n  END IF;
\nEND $$;
\n\n-- Update time_slots to reference activity_resources properly\nDO $$\nBEGIN\n  -- Remove the old activity column from time_slots\n  IF EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'time_slots' AND column_name = 'activity'\n  ) THEN\n    ALTER TABLE time_slots DROP COLUMN activity;
\n  END IF;
\nEND $$;
\n\n-- Add quantity support to cart_items and reservations\nDO $$\nBEGIN\n  -- Add activity selection to cart_items\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'cart_items' AND column_name = 'event_activity_id'\n  ) THEN\n    ALTER TABLE cart_items ADD COLUMN event_activity_id uuid REFERENCES event_activities(id) ON DELETE CASCADE;
\n  END IF;
\n  \n  -- Add activity selection to reservations\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'reservations' AND column_name = 'event_activity_id'\n  ) THEN\n    ALTER TABLE reservations ADD COLUMN event_activity_id uuid REFERENCES event_activities(id) ON DELETE CASCADE;
\n  END IF;
\nEND $$;
\n\n-- Remove pony_resources table (deprecated)\nDROP TABLE IF EXISTS pony_resources CASCADE;
\n\n-- Enable RLS\nALTER TABLE activities ENABLE ROW LEVEL SECURITY;
\nALTER TABLE event_activities ENABLE ROW LEVEL SECURITY;
\n\n-- Policies for activities\nCREATE POLICY "Anyone can view activities"\n  ON activities\n  FOR SELECT\n  TO public\n  USING (true);
\n\nCREATE POLICY "Admins can manage activities"\n  ON activities\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM users\n      WHERE users.id = auth.uid() AND users.role = 'admin'\n    )\n  );
\n\n-- Policies for event_activities\nCREATE POLICY "Anyone can view event activities for published events"\n  ON event_activities\n  FOR SELECT\n  TO public\n  USING (\n    EXISTS (\n      SELECT 1 FROM events\n      WHERE events.id = event_activities.event_id AND events.status = 'published'\n    )\n  );
\n\nCREATE POLICY "Admins can manage event activities"\n  ON event_activities\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM users\n      WHERE users.id = auth.uid() AND users.role = 'admin'\n    )\n  );
\n\n-- Update existing functions\nCREATE OR REPLACE FUNCTION get_event_activity_remaining_stock(event_activity_uuid uuid)\nRETURNS integer\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nDECLARE\n  stock_limit integer;
\n  used_stock integer;
\nBEGIN\n  -- Get the stock limit for this event activity\n  SELECT ea.stock_limit INTO stock_limit\n  FROM event_activities ea\n  WHERE ea.id = event_activity_uuid;
\n  \n  -- If no limit, return a large number\n  IF stock_limit IS NULL THEN\n    RETURN 999999;
\n  END IF;
\n  \n  -- Count used stock from reservations\n  SELECT COALESCE(SUM(r.quantity), 0) INTO used_stock\n  FROM reservations r\n  WHERE r.event_activity_id = event_activity_uuid\n    AND r.payment_status = 'paid';
\n  \n  -- Add reserved stock from cart items\n  SELECT used_stock + COALESCE(SUM(ci.quantity), 0) INTO used_stock\n  FROM cart_items ci\n  WHERE ci.event_activity_id = event_activity_uuid\n    AND ci.reserved_until > now();
\n  \n  RETURN GREATEST(0, stock_limit - used_stock);
\nEND;
\n$$;
;
