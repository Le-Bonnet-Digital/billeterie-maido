\n\n-- Step 1: Identify and drop all dependencies on event_id\nDO $$\nDECLARE\n    constraint_name text;
\n    index_name text;
\nBEGIN\n    -- Drop foreign key constraints on event_id\n    FOR constraint_name IN \n        SELECT conname \n        FROM pg_constraint c\n        JOIN pg_attribute a ON a.attnum = ANY(c.conkey)\n        JOIN pg_class t ON t.oid = c.conrelid\n        WHERE t.relname = 'time_slots' \n        AND a.attname = 'event_id'\n        AND c.contype = 'f'\n    LOOP\n        EXECUTE format('ALTER TABLE time_slots DROP CONSTRAINT IF EXISTS %I', constraint_name);
\n        RAISE NOTICE 'Dropped foreign key constraint: %', constraint_name;
\n    END LOOP;
\n\n    -- Drop indexes on event_id\n    FOR index_name IN\n        SELECT indexname\n        FROM pg_indexes\n        WHERE tablename = 'time_slots'\n        AND indexdef LIKE '%event_id%'\n    LOOP\n        EXECUTE format('DROP INDEX IF EXISTS %I', index_name);
\n        RAISE NOTICE 'Dropped index: %', index_name;
\n    END LOOP;
\nEND $$;
\n\n-- Step 2: Drop existing RLS policies that might reference event_id\nDROP POLICY IF EXISTS "Admins can manage time slots" ON time_slots;
\nDROP POLICY IF EXISTS "Anyone can view time slots for published events" ON time_slots;
\n\n-- Step 3: Add pass_id column if it doesn't exist\nDO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1 FROM information_schema.columns \n        WHERE table_name = 'time_slots' AND column_name = 'pass_id'\n    ) THEN\n        ALTER TABLE time_slots ADD COLUMN pass_id uuid;
\n        RAISE NOTICE 'Added pass_id column to time_slots';
\n    END IF;
\nEND $$;
\n\n-- Step 4: Migrate data from event_id to pass_id\nDO $$\nDECLARE\n    slot_record RECORD;
\n    first_pass_id uuid;
\nBEGIN\n    -- Only migrate if event_id exists and pass_id is null\n    IF EXISTS (\n        SELECT 1 FROM information_schema.columns \n        WHERE table_name = 'time_slots' AND column_name = 'event_id'\n    ) THEN\n        FOR slot_record IN \n            SELECT id, event_id \n            FROM time_slots \n            WHERE pass_id IS NULL AND event_id IS NOT NULL\n        LOOP\n            -- Find the first pass for this event\n            SELECT id INTO first_pass_id\n            FROM passes \n            WHERE event_id = slot_record.event_id \n            LIMIT 1;
\n            \n            IF first_pass_id IS NOT NULL THEN\n                UPDATE time_slots \n                SET pass_id = first_pass_id \n                WHERE id = slot_record.id;
\n                RAISE NOTICE 'Migrated time_slot % from event % to pass %', \n                    slot_record.id, slot_record.event_id, first_pass_id;
\n            ELSE\n                -- Delete orphaned time slots that can't be migrated\n                DELETE FROM time_slots WHERE id = slot_record.id;
\n                RAISE NOTICE 'Deleted orphaned time_slot % (no pass found for event %)', \n                    slot_record.id, slot_record.event_id;
\n            END IF;
\n        END LOOP;
\n    END IF;
\nEND $$;
\n\n-- Step 5: Make pass_id NOT NULL and add foreign key constraint\nALTER TABLE time_slots ALTER COLUMN pass_id SET NOT NULL;
\n\n-- Add foreign key constraint to passes\nALTER TABLE time_slots \nADD CONSTRAINT time_slots_pass_id_fkey \nFOREIGN KEY (pass_id) REFERENCES passes(id) ON DELETE CASCADE;
\n\n-- Step 6: Drop event_id column now that all dependencies are removed\nDO $$\nBEGIN\n    IF EXISTS (\n        SELECT 1 FROM information_schema.columns \n        WHERE table_name = 'time_slots' AND column_name = 'event_id'\n    ) THEN\n        ALTER TABLE time_slots DROP COLUMN event_id;
\n        RAISE NOTICE 'Dropped event_id column from time_slots';
\n    END IF;
\nEND $$;
\n\n-- Step 7: Create new RLS policies for the updated structure\nCREATE POLICY "Admins can manage time slots"\nON time_slots\nFOR ALL\nTO authenticated\nUSING (\n    EXISTS (\n        SELECT 1 FROM users \n        WHERE users.id = auth.uid() \n        AND users.role = 'admin'\n    )\n)\nWITH CHECK (\n    EXISTS (\n        SELECT 1 FROM users \n        WHERE users.id = auth.uid() \n        AND users.role = 'admin'\n    )\n);
\n\nCREATE POLICY "Anyone can view time slots for published events"\nON time_slots\nFOR SELECT\nTO public\nUSING (\n    EXISTS (\n        SELECT 1 FROM passes p\n        JOIN events e ON e.id = p.event_id\n        WHERE p.id = time_slots.pass_id \n        AND e.status = 'published'\n    )\n);
\n\n-- Step 8: Add performance indexes\nCREATE INDEX IF NOT EXISTS idx_time_slots_pass_activity \nON time_slots(pass_id, activity);
\n\nCREATE INDEX IF NOT EXISTS idx_time_slots_slot_time \nON time_slots(slot_time);
\n\n-- Step 9: Update the existing index name if it exists\nDROP INDEX IF EXISTS idx_time_slots_event;
;
