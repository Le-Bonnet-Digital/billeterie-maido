\n\n-- Create activity_resources table\nCREATE TABLE IF NOT EXISTS activity_resources (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  event_id uuid REFERENCES events(id) ON DELETE CASCADE,\n  activity text NOT NULL CHECK (activity IN ('poney', 'tir_arc')),\n  total_capacity integer NOT NULL DEFAULT 100,\n  created_at timestamptz DEFAULT now(),\n  UNIQUE(event_id, activity)\n);
\n\n-- Enable RLS\nALTER TABLE activity_resources ENABLE ROW LEVEL SECURITY;
\n\n-- Add policies\nCREATE POLICY "Admins can manage activity resources"\n  ON activity_resources\n  FOR ALL\n  TO authenticated\n  USING (EXISTS (\n    SELECT 1 FROM users \n    WHERE users.id = auth.uid() AND users.role = 'admin'\n  ))\n  WITH CHECK (EXISTS (\n    SELECT 1 FROM users \n    WHERE users.id = auth.uid() AND users.role = 'admin'\n  ));
\n\nCREATE POLICY "Anyone can view activity resources for published events"\n  ON activity_resources\n  FOR SELECT\n  TO public\n  USING (EXISTS (\n    SELECT 1 FROM events \n    WHERE events.id = activity_resources.event_id AND events.status = 'published'\n  ));
\n\n-- Add activity_resource_id to time_slots\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'time_slots' AND column_name = 'activity_resource_id'\n  ) THEN\n    ALTER TABLE time_slots ADD COLUMN activity_resource_id uuid REFERENCES activity_resources(id) ON DELETE CASCADE;
\n  END IF;
\nEND $$;
\n\n-- Add max_bookings to passes for activity-specific limits\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'passes' AND column_name = 'poney_max_bookings'\n  ) THEN\n    ALTER TABLE passes ADD COLUMN poney_max_bookings integer;
\n  END IF;
\n  \n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'passes' AND column_name = 'tir_arc_max_bookings'\n  ) THEN\n    ALTER TABLE passes ADD COLUMN tir_arc_max_bookings integer;
\n  END IF;
\nEND $$;
\n\n-- Function to get remaining capacity for an activity resource\nCREATE OR REPLACE FUNCTION get_activity_remaining_capacity(activity_resource_uuid uuid)\nRETURNS integer\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nDECLARE\n  total_cap integer;
\n  used_cap integer;
\nBEGIN\n  -- Get total capacity\n  SELECT total_capacity INTO total_cap\n  FROM activity_resources\n  WHERE id = activity_resource_uuid;
\n  \n  IF total_cap IS NULL THEN\n    RETURN 0;
\n  END IF;
\n  \n  -- Count used capacity from all reservations for this activity resource\n  SELECT COALESCE(SUM(1), 0) INTO used_cap\n  FROM reservations r\n  JOIN time_slots ts ON r.time_slot_id = ts.id\n  WHERE ts.activity_resource_id = activity_resource_uuid\n    AND r.payment_status = 'paid';
\n  \n  RETURN GREATEST(0, total_cap - used_cap);
\nEND;
\n$$;
\n\n-- Function to get remaining bookings for a pass on a specific activity\nCREATE OR REPLACE FUNCTION get_pass_activity_remaining(pass_uuid uuid, activity_name text)\nRETURNS integer\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nDECLARE\n  max_bookings integer;
\n  used_bookings integer;
\nBEGIN\n  -- Get max bookings for this activity\n  IF activity_name = 'poney' THEN\n    SELECT poney_max_bookings INTO max_bookings\n    FROM passes WHERE id = pass_uuid;
\n  ELSIF activity_name = 'tir_arc' THEN\n    SELECT tir_arc_max_bookings INTO max_bookings\n    FROM passes WHERE id = pass_uuid;
\n  ELSE\n    RETURN 0;
\n  END IF;
\n  \n  -- If no limit set, return a large number\n  IF max_bookings IS NULL THEN\n    RETURN 999999;
\n  END IF;
\n  \n  -- Count used bookings for this pass and activity\n  SELECT COALESCE(COUNT(*), 0) INTO used_bookings\n  FROM reservations r\n  JOIN time_slots ts ON r.time_slot_id = ts.id\n  WHERE r.pass_id = pass_uuid\n    AND ts.activity = activity_name\n    AND r.payment_status = 'paid';
\n  \n  RETURN GREATEST(0, max_bookings - used_bookings);
\nEND;
\n$$;
\n\n-- Create indexes for performance\nCREATE INDEX IF NOT EXISTS idx_activity_resources_event_activity \nON activity_resources(event_id, activity);
\n\nCREATE INDEX IF NOT EXISTS idx_time_slots_activity_resource \nON time_slots(activity_resource_id);
\n\n-- Insert default activity resources for existing events\nINSERT INTO activity_resources (event_id, activity, total_capacity)\nSELECT DISTINCT e.id, 'poney', 100\nFROM events e\nWHERE NOT EXISTS (\n  SELECT 1 FROM activity_resources ar \n  WHERE ar.event_id = e.id AND ar.activity = 'poney'\n);
\n\nINSERT INTO activity_resources (event_id, activity, total_capacity)\nSELECT DISTINCT e.id, 'tir_arc', 100\nFROM events e\nWHERE NOT EXISTS (\n  SELECT 1 FROM activity_resources ar \n  WHERE ar.event_id = e.id AND ar.activity = 'tir_arc'\n);
\n\n-- Link existing time_slots to activity_resources\nUPDATE time_slots \nSET activity_resource_id = ar.id\nFROM activity_resources ar\nJOIN passes p ON p.event_id = ar.event_id\nWHERE time_slots.pass_id = p.id \n  AND time_slots.activity = ar.activity\n  AND time_slots.activity_resource_id IS NULL;
;
